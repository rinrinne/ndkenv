#!/usr/bin/env bash
#
# Summary: Set or show the local application-specific NDK version
#
# Usage: ndkenv local <version>
#        ndkenv local --unset
#
# Sets the local application-specific NDK version by writing the
# version name to a file named `.ndk-version'.
#
# When you run a NDK command, ndkenv will look for a `.ndk-version'
# file in the current directory and each parent directory. If no such
# file is found in the tree, ndkenv will use the global NDK version
# specified with `ndkenv global'. A version specified with the
# `NDKENV_VERSION' environment variable takes precedence over local
# and global versions.
#
# For backwards compatibility, ndkenv will also read version
# specifications from `.ndkenv-version' files, but a `.ndk-version'
# file in the same directory takes precedence.
#
# <version> should be a string matching a NDK version known to ndkenv.
# The special version string `system' will use your default system NDK.
# Run `ndkenv versions' for a list of available NDK versions.

set -e
[ -n "$NDKENV_DEBUG" ] && set -x

# Provide ndkenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  echo system
  exec ndkenv-versions --bare
fi

NDKENV_VERSION="$1"

if [ "$NDKENV_VERSION" = "--unset" ]; then
  rm -f .ndk-version .ndkenv-version
elif [ -n "$NDKENV_VERSION" ]; then
  previous_file="$(NDKENV_VERSION= ndkenv-version-origin || true)"
  ndkenv-version-file-write .ndk-version "$NDKENV_VERSION"
  if [ "$previous_file" -ef .ndkenv-version ]; then
    rm -f .ndkenv-version
    { echo "ndkenv: removed existing \`.ndkenv-version' file and migrated"
      echo "       local version specification to \`.ndk-version' file"
    } >&2
  fi
else
  ndkenv-version-file-read .ndk-version ||
  ndkenv-version-file-read .ndkenv-version ||
  { echo "ndkenv: no local version configured for this directory"
    exit 1
  } >&2
fi
